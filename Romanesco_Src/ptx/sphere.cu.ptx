//
// Generated by NVIDIA NVVM Compiler
// Compiler built on Fri Aug  1 03:29:38 2014 (1406860178)
// Cuda compilation tools, release 6.5, V6.5.14
//

.version 4.1
.target sm_50
.address_size 64

.global .align 16 .b8 sphere[16];
.global .align 8 .b8 geometric_normal[12];
.global .align 8 .b8 shading_normal[12];
.global .align 4 .b8 ray[36];
.global .align 8 .u64 _ZN21rti_internal_register20reg_bitness_detectorE;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail0E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail1E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail2E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail3E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail4E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail5E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail6E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail7E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail8E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail9E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail0E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail1E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail2E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail3E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail4E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail5E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail6E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail7E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail8E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail9E;
.global .align 4 .u32 _ZN21rti_internal_register14reg_rayIndex_xE;
.global .align 4 .u32 _ZN21rti_internal_register14reg_rayIndex_yE;
.global .align 4 .u32 _ZN21rti_internal_register14reg_rayIndex_zE;
.global .align 4 .b8 _ZN21rti_internal_typeinfo6sphereE[8] = {82, 97, 121, 0, 16, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo16geometric_normalE[8] = {82, 97, 121, 0, 12, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo14shading_normalE[8] = {82, 97, 121, 0, 12, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo3rayE[8] = {82, 97, 121, 0, 36, 0, 0, 0};
.global .align 1 .b8 _ZN21rti_internal_typename6sphereE[7] = {102, 108, 111, 97, 116, 52, 0};
.global .align 1 .b8 _ZN21rti_internal_typename16geometric_normalE[7] = {102, 108, 111, 97, 116, 51, 0};
.global .align 1 .b8 _ZN21rti_internal_typename14shading_normalE[7] = {102, 108, 111, 97, 116, 51, 0};
.global .align 1 .b8 _ZN21rti_internal_typename3rayE[11] = {111, 112, 116, 105, 120, 58, 58, 82, 97, 121, 0};
.global .align 4 .u32 _ZN21rti_internal_typeenum6sphereE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum16geometric_normalE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum14shading_normalE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum3rayE = 4919;
.global .align 1 .b8 _ZN21rti_internal_semantic6sphereE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic16geometric_normalE[27] = {97, 116, 116, 114, 105, 98, 117, 116, 101, 32, 103, 101, 111, 109, 101, 116, 114, 105, 99, 95, 110, 111, 114, 109, 97, 108, 0};
.global .align 1 .b8 _ZN21rti_internal_semantic14shading_normalE[25] = {97, 116, 116, 114, 105, 98, 117, 116, 101, 32, 115, 104, 97, 100, 105, 110, 103, 95, 110, 111, 114, 109, 97, 108, 0};
.global .align 1 .b8 _ZN21rti_internal_semantic3rayE[13] = {114, 116, 67, 117, 114, 114, 101, 110, 116, 82, 97, 121, 0};
.global .align 1 .b8 _ZN23rti_internal_annotation6sphereE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation16geometric_normalE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation14shading_normalE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation3rayE[1];

.weak .func  (.param .b32 func_retval0) cudaMalloc(
	.param .b64 cudaMalloc_param_0,
	.param .b64 cudaMalloc_param_1
)
{
	.reg .s32 	%r<2>;


	mov.u32 	%r1, 30;
	st.param.b32	[func_retval0+0], %r1;
	ret;
}

.weak .func  (.param .b32 func_retval0) cudaFuncGetAttributes(
	.param .b64 cudaFuncGetAttributes_param_0,
	.param .b64 cudaFuncGetAttributes_param_1
)
{
	.reg .s32 	%r<2>;


	mov.u32 	%r1, 30;
	st.param.b32	[func_retval0+0], %r1;
	ret;
}

.weak .func  (.param .b32 func_retval0) cudaDeviceGetAttribute(
	.param .b64 cudaDeviceGetAttribute_param_0,
	.param .b32 cudaDeviceGetAttribute_param_1,
	.param .b32 cudaDeviceGetAttribute_param_2
)
{
	.reg .s32 	%r<2>;


	mov.u32 	%r1, 30;
	st.param.b32	[func_retval0+0], %r1;
	ret;
}

.weak .func  (.param .b32 func_retval0) cudaGetDevice(
	.param .b64 cudaGetDevice_param_0
)
{
	.reg .s32 	%r<2>;


	mov.u32 	%r1, 30;
	st.param.b32	[func_retval0+0], %r1;
	ret;
}

.weak .func  (.param .b32 func_retval0) cudaOccupancyMaxActiveBlocksPerMultiprocessor(
	.param .b64 cudaOccupancyMaxActiveBlocksPerMultiprocessor_param_0,
	.param .b64 cudaOccupancyMaxActiveBlocksPerMultiprocessor_param_1,
	.param .b32 cudaOccupancyMaxActiveBlocksPerMultiprocessor_param_2,
	.param .b64 cudaOccupancyMaxActiveBlocksPerMultiprocessor_param_3
)
{
	.reg .s32 	%r<2>;


	mov.u32 	%r1, 30;
	st.param.b32	[func_retval0+0], %r1;
	ret;
}

.visible .entry _Z9intersecti(
	.param .u32 _Z9intersecti_param_0
)
{
	.reg .pred 	%p<5>;
	.reg .s32 	%r<7>;
	.reg .f32 	%f<50>;


	ld.global.f32 	%f13, [ray];
	ld.global.v4.f32 	{%f14, %f15, %f16, %f17}, [sphere];
	sub.ftz.f32 	%f1, %f13, %f14;
	ld.global.f32 	%f19, [ray+4];
	sub.ftz.f32 	%f2, %f19, %f15;
	ld.global.f32 	%f21, [ray+8];
	sub.ftz.f32 	%f3, %f21, %f16;
	ld.global.f32 	%f6, [ray+20];
	ld.global.f32 	%f4, [ray+12];
	ld.global.f32 	%f5, [ray+16];
	mul.ftz.f32 	%f23, %f2, %f5;
	fma.rn.ftz.f32 	%f24, %f1, %f4, %f23;
	fma.rn.ftz.f32 	%f7, %f3, %f6, %f24;
	mul.ftz.f32 	%f25, %f2, %f2;
	fma.rn.ftz.f32 	%f26, %f1, %f1, %f25;
	fma.rn.ftz.f32 	%f27, %f3, %f3, %f26;
	mul.ftz.f32 	%f28, %f17, %f17;
	sub.ftz.f32 	%f29, %f27, %f28;
	mul.ftz.f32 	%f30, %f7, %f7;
	sub.ftz.f32 	%f9, %f30, %f29;
	setp.leu.ftz.f32	%p1, %f9, 0f00000000;
	@%p1 bra 	BB5_5;

	sqrt.approx.ftz.f32 	%f10, %f9;
	neg.ftz.f32 	%f32, %f7;
	sub.ftz.f32 	%f33, %f32, %f10;
	add.ftz.f32 	%f31, %f33, 0f00000000;
	// inline asm
	call (%r1), _rt_potential_intersection, (%f31);
	// inline asm
	setp.eq.s32	%p2, %r1, 0;
	@%p2 bra 	BB5_3;

	fma.rn.ftz.f32 	%f34, %f4, %f31, %f1;
	fma.rn.ftz.f32 	%f35, %f5, %f31, %f2;
	fma.rn.ftz.f32 	%f36, %f6, %f31, %f3;
	rcp.approx.ftz.f32 	%f37, %f17;
	mul.ftz.f32 	%f38, %f36, %f37;
	mul.ftz.f32 	%f39, %f35, %f37;
	mul.ftz.f32 	%f40, %f34, %f37;
	st.global.v2.f32 	[geometric_normal], {%f40, %f39};
	st.global.f32 	[geometric_normal+8], %f38;
	st.global.v2.f32 	[shading_normal], {%f40, %f39};
	st.global.f32 	[shading_normal+8], %f38;
	mov.u32 	%r3, 0;
	// inline asm
	call (%r2), _rt_report_intersection, (%r3);
	// inline asm
	setp.ne.s32	%p3, %r2, 0;
	@%p3 bra 	BB5_5;

BB5_3:
	sub.ftz.f32 	%f42, %f10, %f7;
	add.ftz.f32 	%f41, %f42, 0f00000000;
	// inline asm
	call (%r4), _rt_potential_intersection, (%f41);
	// inline asm
	setp.eq.s32	%p4, %r4, 0;
	@%p4 bra 	BB5_5;

	fma.rn.ftz.f32 	%f43, %f4, %f41, %f1;
	fma.rn.ftz.f32 	%f44, %f5, %f41, %f2;
	fma.rn.ftz.f32 	%f45, %f6, %f41, %f3;
	rcp.approx.ftz.f32 	%f46, %f17;
	mul.ftz.f32 	%f47, %f45, %f46;
	mul.ftz.f32 	%f48, %f44, %f46;
	mul.ftz.f32 	%f49, %f43, %f46;
	st.global.v2.f32 	[geometric_normal], {%f49, %f48};
	st.global.f32 	[geometric_normal+8], %f47;
	st.global.v2.f32 	[shading_normal], {%f49, %f48};
	st.global.f32 	[shading_normal+8], %f47;
	mov.u32 	%r6, 0;
	// inline asm
	call (%r5), _rt_report_intersection, (%r6);
	// inline asm

BB5_5:
	ret;
}

.visible .entry _Z16robust_intersecti(
	.param .u32 _Z16robust_intersecti_param_0
)
{
	.reg .pred 	%p<8>;
	.reg .s32 	%r<7>;
	.reg .f32 	%f<80>;


	ld.global.f32 	%f24, [ray];
	ld.global.v4.f32 	{%f25, %f26, %f27, %f28}, [sphere];
	sub.ftz.f32 	%f1, %f24, %f25;
	ld.global.f32 	%f30, [ray+4];
	sub.ftz.f32 	%f2, %f30, %f26;
	ld.global.f32 	%f32, [ray+8];
	sub.ftz.f32 	%f3, %f32, %f27;
	ld.global.f32 	%f6, [ray+20];
	ld.global.f32 	%f4, [ray+12];
	ld.global.f32 	%f5, [ray+16];
	mul.ftz.f32 	%f34, %f2, %f5;
	fma.rn.ftz.f32 	%f35, %f1, %f4, %f34;
	fma.rn.ftz.f32 	%f77, %f3, %f6, %f35;
	mul.ftz.f32 	%f36, %f2, %f2;
	fma.rn.ftz.f32 	%f37, %f1, %f1, %f36;
	fma.rn.ftz.f32 	%f38, %f3, %f3, %f37;
	mul.ftz.f32 	%f9, %f28, %f28;
	sub.ftz.f32 	%f39, %f38, %f9;
	mul.ftz.f32 	%f40, %f77, %f77;
	sub.ftz.f32 	%f10, %f40, %f39;
	setp.leu.ftz.f32	%p1, %f10, 0f00000000;
	@%p1 bra 	BB6_8;

	sqrt.approx.ftz.f32 	%f78, %f10;
	neg.ftz.f32 	%f41, %f77;
	sub.ftz.f32 	%f12, %f41, %f78;
	abs.ftz.f32 	%f13, %f12;
	mul.ftz.f32 	%f14, %f28, 0f41200000;
	setp.gt.ftz.f32	%p2, %f13, %f14;
	mov.f32 	%f79, 0f00000000;
	@%p2 bra 	BB6_2;
	bra.uni 	BB6_4;

BB6_2:
	ld.global.f32 	%f43, [ray+12];
	ld.global.f32 	%f44, [ray+16];
	ld.global.f32 	%f45, [ray+20];
	fma.rn.ftz.f32 	%f46, %f43, %f12, %f1;
	fma.rn.ftz.f32 	%f47, %f44, %f12, %f2;
	fma.rn.ftz.f32 	%f48, %f45, %f12, %f3;
	mul.ftz.f32 	%f49, %f47, %f5;
	fma.rn.ftz.f32 	%f50, %f46, %f4, %f49;
	fma.rn.ftz.f32 	%f77, %f48, %f6, %f50;
	mul.ftz.f32 	%f51, %f47, %f47;
	fma.rn.ftz.f32 	%f52, %f46, %f46, %f51;
	fma.rn.ftz.f32 	%f53, %f48, %f48, %f52;
	sub.ftz.f32 	%f54, %f53, %f9;
	mul.ftz.f32 	%f55, %f77, %f77;
	sub.ftz.f32 	%f16, %f55, %f54;
	setp.gt.ftz.f32	%p3, %f16, 0f00000000;
	@%p3 bra 	BB6_3;
	bra.uni 	BB6_4;

BB6_3:
	sqrt.approx.ftz.f32 	%f78, %f16;
	neg.ftz.f32 	%f57, %f77;
	sub.ftz.f32 	%f79, %f57, %f78;

BB6_4:
	add.ftz.f32 	%f58, %f12, %f79;
	// inline asm
	call (%r1), _rt_potential_intersection, (%f58);
	// inline asm
	setp.eq.s32	%p4, %r1, 0;
	@%p4 bra 	BB6_6;

	fma.rn.ftz.f32 	%f59, %f4, %f58, %f1;
	fma.rn.ftz.f32 	%f60, %f5, %f58, %f2;
	fma.rn.ftz.f32 	%f61, %f6, %f58, %f3;
	rcp.approx.ftz.f32 	%f62, %f28;
	mul.ftz.f32 	%f63, %f61, %f62;
	mul.ftz.f32 	%f64, %f60, %f62;
	mul.ftz.f32 	%f65, %f59, %f62;
	st.global.v2.f32 	[geometric_normal], {%f65, %f64};
	st.global.f32 	[geometric_normal+8], %f63;
	st.global.v2.f32 	[shading_normal], {%f65, %f64};
	st.global.f32 	[shading_normal+8], %f63;
	mov.u32 	%r3, 0;
	// inline asm
	call (%r2), _rt_report_intersection, (%r3);
	// inline asm
	setp.ne.s32	%p5, %r2, 0;
	@%p5 bra 	BB6_8;

BB6_6:
	selp.f32	%f67, %f12, 0f00000000, %p2;
	sub.ftz.f32 	%f68, %f78, %f77;
	add.ftz.f32 	%f66, %f68, %f67;
	// inline asm
	call (%r4), _rt_potential_intersection, (%f66);
	// inline asm
	setp.eq.s32	%p7, %r4, 0;
	@%p7 bra 	BB6_8;

	fma.rn.ftz.f32 	%f69, %f4, %f66, %f1;
	fma.rn.ftz.f32 	%f70, %f5, %f66, %f2;
	fma.rn.ftz.f32 	%f71, %f6, %f66, %f3;
	rcp.approx.ftz.f32 	%f72, %f28;
	mul.ftz.f32 	%f73, %f71, %f72;
	mul.ftz.f32 	%f74, %f70, %f72;
	mul.ftz.f32 	%f75, %f69, %f72;
	st.global.v2.f32 	[geometric_normal], {%f75, %f74};
	st.global.f32 	[geometric_normal+8], %f73;
	st.global.v2.f32 	[shading_normal], {%f75, %f74};
	st.global.f32 	[shading_normal+8], %f73;
	mov.u32 	%r6, 0;
	// inline asm
	call (%r5), _rt_report_intersection, (%r6);
	// inline asm

BB6_8:
	ret;
}

.visible .entry _Z6boundsiPf(
	.param .u32 _Z6boundsiPf_param_0,
	.param .u64 _Z6boundsiPf_param_1
)
{
	.reg .pred 	%p<6>;
	.reg .s32 	%r<3>;
	.reg .f32 	%f<16>;
	.reg .s64 	%rd<3>;


	ld.param.u64 	%rd2, [_Z6boundsiPf_param_1];
	ld.global.f32 	%f1, [sphere+12];
	setp.gt.ftz.f32	%p3, %f1, 0f00000000;
	@%p3 bra 	BB7_2;

	mov.pred 	%p5, 0;
	bra.uni 	BB7_3;

BB7_2:
	abs.ftz.f32 	%f2, %f1;
	setp.neu.ftz.f32	%p5, %f2, 0f7F800000;

BB7_3:
	cvta.to.global.u64 	%rd1, %rd2;
	@%p5 bra 	BB7_5;

	mov.u32 	%r1, 2096152002;
	st.global.u32 	[%rd1], %r1;
	st.global.u32 	[%rd1+8], %r1;
	st.global.u32 	[%rd1+4], %r1;
	mov.u32 	%r2, -51331646;
	st.global.u32 	[%rd1+12], %r2;
	st.global.u32 	[%rd1+16], %r2;
	st.global.u32 	[%rd1+20], %r2;
	bra.uni 	BB7_6;

BB7_5:
	ld.global.v4.f32 	{%f3, %f4, %f5, %f6}, [sphere];
	sub.ftz.f32 	%f8, %f3, %f1;
	sub.ftz.f32 	%f10, %f4, %f1;
	sub.ftz.f32 	%f12, %f5, %f1;
	st.global.f32 	[%rd1], %f8;
	st.global.f32 	[%rd1+8], %f12;
	st.global.f32 	[%rd1+4], %f10;
	add.ftz.f32 	%f13, %f3, %f1;
	add.ftz.f32 	%f14, %f4, %f1;
	add.ftz.f32 	%f15, %f5, %f1;
	st.global.f32 	[%rd1+12], %f13;
	st.global.f32 	[%rd1+16], %f14;
	st.global.f32 	[%rd1+20], %f15;

BB7_6:
	ret;
}

.visible .func _ZN5optix3RayC1Ev(
	.param .b64 _ZN5optix3RayC1Ev_param_0
)
{



	ret;
}

.visible .func _ZN5optix3RayC2Ev(
	.param .b64 _ZN5optix3RayC2Ev_param_0
)
{



	ret;
}


